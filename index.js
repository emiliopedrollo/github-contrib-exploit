const jsonFile = require('jsonfile');
const moment = require('moment');
const simpleGit = require('simple-git')

const FILE_PATH = './data.json';

const makeCommit = (x, y, n, reference_date) => {
    return new Promise((resolve) => {
        if ( n === 0 ) {
            resolve();
            return;
        }

        const offset_time = moment(reference_date).add(n-1,'m')

        const DOW = moment(offset_time).day();

        const DATE = moment(offset_time).subtract(52, 'w').subtract(DOW, 'd')
            .add(x, 'w').add(y,'d').format();

        const data = {
            date: DATE
        }

        jsonFile.writeFile(FILE_PATH, data, () => {
            simpleGit()
                .add([FILE_PATH])
                .commit(DATE,undefined, {'--date': DATE},
                    () => makeCommit(x, y, --n, reference_date).then(resolve));
        });
    });
}

const charToCoordinates = (char) => {
    switch(char) {
        case 'A' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1, ],
                    [ ,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                ], 4];
        }
        case 'B' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1, ],
                ], 4];
        }
        case 'C' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1,1],
                ], 4];
        }
        case 'D' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1, ],
                ], 4];
        }
        case 'E' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1, ],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1,1],
                ], 4];
        }
        case 'F' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1, ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                ], 4];
        }
        case 'G' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [1, ,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                ], 4];
        }
        case 'H' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                ], 4];
        }
        case 'I' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1],
                    [1],
                    [1],
                    [1],
                    [1],
                    [1],
                    [1],
                ], 1];
        }
        case 'J' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1,1],
                    [ , , ,1],
                    [ , , ,1],
                    [ , , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                ], 4];
        }
        case 'K' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [1, ,1, ],
                    [1,1, , ],
                    [1, ,1, ],
                    [1, , ,1],
                    [1, , ,1],
                ], 4];
        }
        case 'L' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1,1],
                ], 4];
        }
        case 'M' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , , ,1],
                    [1,1, ,1,1],
                    [1, ,1, ,1],
                    [1, , , ,1],
                    [1, , , ,1],
                    [1, , , ,1],
                    [1, , , ,1],
                ], 5];
        }
        case 'N' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , , ,1],
                    [1,1, , ,1],
                    [1,1,1, ,1],
                    [1, ,1, ,1],
                    [1, ,1,1,1],
                    [1, , ,1,1],
                    [1, , , ,1],
                ], 5];
        }
        case 'O' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                ], 4];
        }
        case 'P' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1, ],
                    [1, , , ],
                    [1, , , ],
                    [1, , , ],
                ], 4];
        }
        case 'Q' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, ,1, ],
                    [ ,1,1,1],
                ], 4];
        }
        case 'R' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1, ],
                    [1,1, , ],
                    [1, ,1, ],
                    [1, , ,1],
                ], 4];
        }
        case 'S' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [ ,1,1, ],
                    [ , , ,1],
                    [ , , ,1],
                    [1,1,1, ],
                ], 4];
        }
        case 'T' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1,1],
                    [ , ,1, , ],
                    [ , ,1, , ],
                    [ , ,1, , ],
                    [ , ,1, , ],
                    [ , ,1, , ],
                    [ , ,1, , ],
                ], 5];
        }
        case 'U' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                ], 4];
        }
        case 'V' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                    [ ,1,1, ],
                ], 4];
        }
        case 'W' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , , ,1],
                    [1, , , ,1],
                    [1, , , ,1],
                    [1, , , ,1],
                    [1, ,1, ,1],
                    [1,1, ,1,1],
                    [1, , , ,1],
                ], 5];
        }
        case 'X' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                    [ ,1,1, ],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                ], 4];
        }
        case 'Y' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [ ,1,1, ],
                    [ ,1,1, ],
                    [ ,1,1, ],
                    [ ,1,1, ],
                ], 4];
        }
        case 'Z' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [ , , ,1],
                    [ , ,1,1],
                    [ ,1,1, ],
                    [1,1, , ],
                    [1, , , ],
                    [1,1,1,1],
                ], 4];
        }
        case '0' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                ], 4];
        }
        case '1' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1, ],
                    [1,1, ],
                    [ ,1, ],
                    [ ,1, ],
                    [ ,1, ],
                    [ ,1, ],
                    [1,1,1],
                ], 3];
        }
        case '2' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ ,1,1, ],
                    [1, , ,1],
                    [ , , ,1],
                    [ , ,1, ],
                    [ ,1, , ],
                    [1, , , ],
                    [1,1,1,1],
                ], 4];
        }
        case '3' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1, ],
                    [ , , ,1],
                    [ , , ,1],
                    [1,1,1, ],
                    [ , , ,1],
                    [ , , ,1],
                    [1,1,1, ],
                ], 4];
        }
        case '4' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1, , ,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                    [ , , ,1],
                    [ , , ,1],
                    [ , , ,1],
                ], 4];
        }
        case '5' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1,1],
                    [ , , ,1],
                    [ , , ,1],
                    [1,1,1,1],
                ], 4];
        }
        case '6' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , , ],
                    [1, , , ],
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                ], 4];
        }
        case '7' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [ , , ,1],
                    [ , , ,1],
                    [ , , ,1],
                    [ , , ,1],
                    [ , , ,1],
                    [ , , ,1],
                ], 4];
        }
        case '8' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                ], 4];
        }
        case '9' :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1,1,1,1],
                    [1, , ,1],
                    [1, , ,1],
                    [1,1,1,1],
                    [ , , ,1],
                    [ , , ,1],
                    [1,1,1,1],
                ], 4];
        }
        case "'" :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [1],
                    [1],
                    [ ],
                    [ ],
                    [ ],
                    [ ],
                    [ ],
                ], 1];
        }
        case "-" :{
            // noinspection JSConsecutiveCommasInArrayLiteral
            return [[
                    [ , ],
                    [ , ],
                    [ , ],
                    [1,1],
                    [ , ],
                    [ , ],
                    [ , ],
                ], 2];
        }
        default : {
            return [[], 0]
        }
    }
}

const textToCoordinates = (text) => {
    let coords = [];
    let offset = 0;
    for (let i = 0; i < text.length; i++) {
        if (text.charAt(i) === ' ') {
            offset += 2;
            continue;
        }
        let [l_coords, l_width] = charToCoordinates(text.charAt(i).toUpperCase());
        for (let x = 0; x < l_width; x++) {
            coords[offset + x] = [];
            for (let y = 0; y < 7; y++) {
                coords[offset + x][y] = l_coords[y][x]
            }
        }
        offset += l_width + 1;
    }
    return coords;
}

const printCoordinates = (coords) => {

    for (let y = 0; y < 7; y++) {
        let line = ''
        for (let x = 0; x < coords.length; x++) {
            if (coords[x] !== undefined && coords[x][y]) {
                line += ' \u2592'
            } else {
                line += '  '
            }
        }
        console.log(line)
    }
}

const commitCoordinates = async (coords, year) => {
    let date = moment(`31-12-${year} 12:00`,'DD-MM-YYYY HH:mm')

    for (let x = 0; x < coords.length; x++) {
        for (let y = 0; y < 7; y++) {
            if (coords[x] !== undefined && coords[x][y]) {
                await makeCommit(x,y, 10,date)
            }
        }
    }
    console.log('finished')
}

const commitText = (text, display = true) => {
    let coords = textToCoordinates(text)
    if (display) {
        printCoordinates(coords)
    }
    commitCoordinates(coords,2014).then(()=>{
        simpleGit().push();
    });
}

commitText("I'm Badass")
